
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
#Область ОбработчикиСобытий
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Если НачалоДня(Договор.ДатаНачала) > Дата Или Дата > КонецДня(Договор.ДатаОкончания) Тогда
		Возврат;
	КонецЕсли;
	
	ПС = Символы.ПС;
	ТекстСообщения = "";
	
	Если ЭтоНовый() Тогда
		ТекстСообщения =""+ТекущаяДата()+": Создан новый документ ""Обслуживание клиента"""+ПС+
		"Дата документа: "+Дата+", Номер: "+Номер+ПС+
		"Клиент: "+Клиент+ПС+
		"Специалист: "+Специалист+ПС+
		"Дата проведения работ: "+ДатаПроведенияРабот+ПС+
		"Описание проблемы: "+ОписаниеПроблемы+ПС;
	ИначеЕсли Модифицированность() Тогда
		ТекстСообщения =""+ТекущаяДата()+": Изменен документ ""Обслуживание клиента"""+ПС+ 
		"Дата документа: "+Ссылка.Дата+", Номер: "+Номер+ПС+
		"Внесены изменения в Реквизиты:"+ПС+
		?(Ссылка.Дата<>Дата,"Дата документа: "+Дата+ПС,"")+
		?(Ссылка.Клиент<>Клиент,"Клиент: "+Клиент+ПС,"")+
		?(Ссылка.Специалист<>Специалист,"Специалист: "+Специалист+ПС,"")+
		?(Ссылка.ДатаПроведенияРабот<>ДатаПроведенияРабот,"Дата проведения работ: "+ДатаПроведенияРабот+ПС,"")+
		?(Ссылка.ОписаниеПроблемы<>ОписаниеПроблемы,"Описание проблемы: "+ОписаниеПроблемы+ПС,"");
	КонецЕсли;
	
	//ТокенБота = Константы.ТокенУправленияТелеграмБотом.Получить();
	//ChatID = Константы.ИдентификаторГруппыДляОповещения.Получить();
		
	Если ТекстСообщения <> "" Тогда
		НовыйЭлементСправочника = Справочники.УведомленияТелеграмБоту.СоздатьЭлемент();
		НовыйЭлементСправочника.ТекстСообщения = ТекстСообщения;
		НовыйЭлементСправочника.Записать();
		//ТелеграмКлиентСервер.ОтправитьСообщениеВTelegram(ТекстСообщения, ТокенБота, ChatID);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВКМ_ОбслуживаниеКлиентаВыполненныеРаботы.Ссылка КАК Ссылка,
		|	СУММА(ВКМ_ОбслуживаниеКлиентаВыполненныеРаботы.ЧасыКОплатеКлиенту) КАК КоличествоЧасов
		|ПОМЕСТИТЬ ВТ_Работы
		|ИЗ
		|	Документ.ВКМ_ОбслуживаниеКлиента.ВыполненныеРаботы КАК ВКМ_ОбслуживаниеКлиентаВыполненныеРаботы
		|ГДЕ
		|	ВКМ_ОбслуживаниеКлиентаВыполненныеРаботы.Ссылка = &Ссылка
		|СГРУППИРОВАТЬ ПО
		|	ВКМ_ОбслуживаниеКлиентаВыполненныеРаботы.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВКМ_ОбслуживаниеКлиента.Клиент КАК Клиент,
		|	ВКМ_ОбслуживаниеКлиента.Договор КАК Договор,
		|	ВКМ_ОбслуживаниеКлиента.Специалист КАК Сотрудник,
		|	ВКМ_ОбслуживаниеКлиента.ДатаПроведенияРабот КАК ДатаПроведенияРабот,
		|	ЕСТЬNULL(ВТ_Работы.КоличествоЧасов, 0) КАК КоличествоЧасов,
		|	ДоговорыКонтрагентов.ВидДоговора КАК ВидДоговора,
		|	ДоговорыКонтрагентов.ДатаНачала КАК ВКМ_ДатаНачалаДействияДоговора,
		|	ДоговорыКонтрагентов.ДатаОкончания КАК ВКМ_ДатаОкончанияДействияДоговора,
		|	ДоговорыКонтрагентов.ЧасоваяСтавка КАК ВКМ_СтоимостьЧасаРаботы,
		|	ЕСТЬNULL(ДоговорыКонтрагентов.ЧасоваяСтавка, 0) * ЕСТЬNULL(ВТ_Работы.КоличествоЧасов, 0) КАК СуммаКОплате,
		|	ЕСТЬNULL(ВКМ_УсловияОплатыСотрудниковСрезПоследних.ПроцентОтРабот, -1) КАК ПроцентОтРабот,
		|	ВКМ_ОбслуживаниеКлиента.Дата КАК Период
		|ИЗ
		|	Документ.ВКМ_ОбслуживаниеКлиента КАК ВКМ_ОбслуживаниеКлиента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|		ПО ВКМ_ОбслуживаниеКлиента.Договор = ДоговорыКонтрагентов.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Работы КАК ВТ_Работы
		|		ПО ВКМ_ОбслуживаниеКлиента.Ссылка = ВТ_Работы.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВКМ_УсловияОплатыСотрудников.СрезПоследних(&Период, Сотрудник = &Сотрудник) КАК
		|			ВКМ_УсловияОплатыСотрудниковСрезПоследних
		|		ПО ВКМ_ОбслуживаниеКлиента.Специалист = ВКМ_УсловияОплатыСотрудниковСрезПоследних.Сотрудник
		|ГДЕ
		|	ВКМ_ОбслуживаниеКлиента.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Сотрудник", Специалист);
	Запрос.УстановитьПараметр("Период", Дата);
		
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Не ВведенныеДанныеКорректны(Выборка) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// регистр ВКМ_ВыполненныеКлиентуРаботы
	Движения.ВКМ_ВыполненныеКлиентуРаботы.Записывать = Истина;
	
	Движение = Движения.ВКМ_ВыполненныеКлиентуРаботы.Добавить();
	ЗаполнитьЗначенияСвойств(Движение, Выборка);
	
	Движения.ВКМ_ВыполненныеСотрудникомРаботы.Записывать = Истина;
	Если Выборка.ПроцентОтРабот = -1 Тогда
		ОбщегоНазначения.СообщитьПользователю("Проведение документа невозможно: на дату документа специалисту не установлен процент оплаты от работ"); 
		Отказ = Истина;
		Возврат;
	КонецЕсли;	
	
	Движение = Движения.ВКМ_ВыполненныеСотрудникомРаботы.Добавить();
	ЗаполнитьЗначенияСвойств(Движение, Выборка);
	Движение.СуммаКОплате = Выборка.СуммаКОплате * Выборка.ПроцентОтРабот / 100;
	Движение.ЧасовКОплате = Выборка.КоличествоЧасов;
	
КонецПроцедуры

Функция ВведенныеДанныеКорректны(Выборка)
	
	ДанныеКорректны = Истина;

	Если Выборка.ВидДоговора <> ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.АбонентскаяПлата") Тогда
		ДанныеКорректны = Ложь;
		ОбщегоНазначения.СообщитьПользователю("Проведение документа невозможно: Выбран неподходящий тип договора.",,"Договор","Объект");
		Возврат ДанныеКорректны;
	КонецЕсли;
	
	Если Дата < Выборка.ВКМ_ДатаНачалаДействияДоговора Или Дата > Выборка.ВКМ_ДатаОкончанияДействияДоговора Тогда
		ДанныеКорректны = Ложь;
		ОбщегоНазначения.СообщитьПользователю("Проведение документа невозможно: Дата документа за пределами периода действия договора.",,"Дата","Объект");
	КонецЕсли;
		
	Если ДатаПроведенияРабот < Выборка.ВКМ_ДатаНачалаДействияДоговора Или ДатаПроведенияРабот > Выборка.ВКМ_ДатаОкончанияДействияДоговора Тогда
		ОбщегоНазначения.СообщитьПользователю("Предупреждение: Дата проведения работ за пределами периода действия договора.",,"ДатаПроведенияРабот","Объект");
	КонецЕсли;	
	
	Возврат ДанныеКорректны;
КонецФункции

#КонецОбласти
#КонецЕсли

